# -*- coding: utf-8 -*-
"""Patient Health Monitoring â€” Vital Signs Prediction using GRU

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ktrQOeQfWmmHsCphcCmmuNw1quNVjTtG
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
# Corrected import for Sequential model using Keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import GRU,Dense,Dropout
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.callbacks import EarlyStopping

np.random.seed(42)
time_steps = 2000
heart_rate = np.sin(np.linspace(0, 50, time_steps)) * 10 + 70 + np.random.randn(time_steps)
bp = np.cos(np.linspace(0, 50, time_steps)) * 5 + 120 + np.random.randn(time_steps)

data = pd.DataFrame({"Heart Rate": heart_rate, "Blood Pressure": bp})
display(data.head())

scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

seq_length = 20
X,y = [],[]
for i in range (seq_length,len(scaled_data)):
  X.append(scaled_data[i-seq_length:i])
  y.append(scaled_data[i,0])

X,y = np.array(X), np.array(y)

split = int(0.8 * len(X))
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

model = Sequential([
    GRU(128, input_shape=(X_train.shape[1],X_train.shape[2]), return_sequences=True),
    Dropout(0.3),
    GRU(64),
    Dropout(0.3),
    Dense(1)
])

model.compile(optimizer='adam',loss='mse',metrics=['mae'])
model.fit(X_train,y_train)

early_stop = EarlyStopping(monitor='loss', patience=5)
history = model.fit(X_train, y_train, epochs=30, batch_size=32, validation_split=0.1, callbacks=[early_stop])

y_pred = model.predict(X_test)

scaled_full = np.zeros((len(y_pred), scaled_data.shape[1]))
scaled_full[:, 0] = y_pred.flatten()
pred_heart_rate = scaler.inverse_transform(scaled_full)[:, 0]

scaled_full_true = np.zeros((len(y_test), scaled_data.shape[1]))
scaled_full_true[:, 0] = y_test.flatten()
true_heart_rate = scaler.inverse_transform(scaled_full_true)[:, 0]

import matplotlib.pyplot as plt
plt.figure(figsize=(10,6))
plt.plot(true_heart_rate, label='Actual Heart Rate', color='blue')
plt.plot(pred_heart_rate, label='Predicted Heart Rate', color='red')
plt.title('Patient Vital Prediction using GRU')
plt.xlabel('Time Steps')
plt.ylabel('Heart Rate')
plt.legend()
plt.show()

